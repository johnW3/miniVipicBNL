/* drvVIPIC.cpp
 *
 * Driver for VIPIC being controlled by microZed
 *
 * John Weizeorick
 * March 25, 2016
*/

#include <math.h>
#include <iocsh.h>
#include <epicsThread.h>
#include <asynPortDriver.h>
#include "cbw.h"
#include <epicsExport.h>

// not sure which are needed
#include	<stddef.h>
#include	<stdio.h>
#include	<sys/types.h>
#include	<unistd.h>
#include	<sys/mman.h>
#include	<sys/stat.h>
#include	<epicsPrint.h>

static const char *driverName = "drvVIPIC";

// Digital I/O parameters
#define digitalDirectionString "DIGITAL_DIRECTION"
#define digitalOutputString "DIGITAL_OUTPUT" 

#define NUM_IO_BITS 4 // Number of digital I/O bits on 1608G 

/** Class definition for the USB1608G class
 */
class ZED : public asynPortDriver {
public:
    ZED(const char *portName, int boardNum);

 /* These are the methods that we override from asynPortDriver */
    virtual asynStatus writeUInt32Digital(asynUser *pasynUser, epicsUInt32 value, epicsUInt32 mask); 
protected:
    int digitalDirection_;
    int digitalOutput_;

private:
    int boardNum_;
};

/** Constructor for the Zed class */

USB1608G::USB1608G(const char *portName, int boardNum)
 : asynPortDriver(portName, MAX_SIGNALS, NUM_PARAMS,
    // Interfaces that we implement
    asynInt32Mask | asynUInt32DigitalMask | asynDrvUserMask,
    // Interfaces that do callbacks
                    asynUInt32DigitalMask,
    ASYN_MULTIDEVICE | ASYN_CANBLOCK, 1,
    /* ASYN_CANBLOCK=1, ASYN_MULTIDEVICE=1, autoConnect=1 */
    0, 0), /* Default priority and stack size */
 boardNum_(boardNum)
{ 
    // Digital I/O parameters
    createParam(digitalDirectionString, asynParamUInt32Digital, &digitalDirection_);
    createParam(digitalOutputString, asynParamUInt32Digital, &digitalOutput_); 
}

asynStatus USB1608G::writeUInt32Digital(asynUser *pasynUser, epicsUInt32 value,
epicsUInt32 mask)
{
    int function = pasynUser->reason;
    int status=0;
    int i;
    epicsUInt32 outValue=0, outMask, direction=0;
    static const char *functionName = "writeUInt32Digital";
    setUIntDigitalParam(function, value, mask);
    if (function == digitalDirection_) {
        outValue = (value == 0) ? DIGITALIN : DIGITALOUT;
        for (i=0; i<NUM_IO_BITS; i++) {
            if ((mask & (1<<i)) != 0) {
                status = cbDConfigBit(boardNum_, AUXPORT, i, outValue);
            }
        }
    }
    else if (function == digitalOutput_) {
        getUIntDigitalParam(digitalDirection_, &direction, 0xFFFFFFFF);
        for (i=0, outMask=1; i<NUM_IO_BITS; i++, outMask = (outMask<<1)) {
            // Only write the value if the mask has this bit set and the direction
            // for that bit is output (1)
            outValue = ((value &outMask) == 0) ? 0 : 1;
            if ((mask & outMask & direction) != 0) {
                status = cbDBitOut(boardNum_, AUXPORT, i, outValue);
            }
        } 
     }
    callParamCallbacks();
    if (status == 0) {
        asynPrint(pasynUser, ASYN_TRACEIO_DRIVER,
            "%s:%s, port %s, wrote outValue=0x%x, value=0x%x, mask=0x%x, direction=0x%x\n",
            driverName, functionName, this->portName, outValue, value, mask, direction);
    } else {
        asynPrint(pasynUser, ASYN_TRACE_ERROR,
        "%s:%s, port %s, ERROR writing outValue=0x%x, value=0x%x, mask=0x%x,
        direction=0x%x, status=%d\n",
        driverName, functionName, this->portName, outValue, value, mask, direction,
        status);
    }
    return (status==0) ? asynSuccess : asynError;
} 


